#Использовать fluent
#Использовать optional
#Использовать lambdas

#Использовать "../../../internal"

Перем Соответствие; // Внутреннее соответствие

Перем Ключи;          // Кеш представления множества ключей карты 
Перем Значения;       // Кеш представления коллекции значений карты
Перем КлючиИЗначения; // Кеш представления множества КлючИЗначение карты

Функция СодержитКлюч(Ключ) Экспорт
	Возврат Ключи().Содержит(Ключ);
КонецФункции

Функция СодержитЗначение(Значение) Экспорт
	Возврат Значения().Содержит(Значение);
КонецФункции

Процедура ДляКаждого(Знач Алгоритм) Экспорт

	Если ТипЗнч(Алгоритм) = Тип("Строка") Тогда

		Алгоритм = Лямбда.Выражение(Алгоритм)
			.Интерфейс(ФункциональныеИнтерфейсы.БиПроцедура())
			.ВДействие();

	КонецЕсли;

	Для каждого КлючИЗначение Из Соответствие Цикл
		Алгоритм.Выполнить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

КонецПроцедуры

Функция Получить(Ключ) Экспорт
	
	Значение = Соответствие.Получить(Ключ);

	Если Значение = Неопределено Тогда
		Возврат Опциональные.Пустой();
	КонецЕсли;

	Возврат Новый Опциональный(Значение);

КонецФункции

Функция ПолучитьИлиУмолчание(Ключ, ЗначениеПоУмолчанию) Экспорт

	Значение = Соответствие.Получить(Ключ);

	Если Значение = Неопределено Тогда
		Значение = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат Значение;

КонецФункции

Функция Пусто() Экспорт
	Возврат Количество() = 0;
КонецФункции

Функция Ключи() Экспорт

	Если Ключи = Неопределено Тогда
		Ключи = Новый ФиксированноеМножествоКлючей(Соответствие, ЭтотОбъект);
	КонецЕсли;

	Возврат Ключи;

КонецФункции

Функция Значения() Экспорт

	Если Значения = Неопределено Тогда
		Значения = Новый ФиксированнаяКоллекцияЗначений(Соответствие, ЭтотОбъект);
	КонецЕсли;

	Возврат Значения;

КонецФункции

Функция КлючиИЗначения() Экспорт

	Если КлючиИЗначения = Неопределено Тогда
		КлючиИЗначения = Новый ФиксированноеМножествоКлючейИЗначений(Соответствие, ЭтотОбъект);
	КонецЕсли;

	Возврат КлючиИЗначения;

КонецФункции

Функция Количество() Экспорт
	Возврат Соответствие.Количество();
КонецФункции

Процедура Очистить() Экспорт
	Соответствие.Очистить();
	ОповеститьОбИзмененииКоллекции();
КонецПроцедуры

Функция Вставить(Ключ, Значение) Экспорт

	Если Ключ = Неопределено Или Значение = Неопределено Тогда
		ВызватьИсключение "Неопределено не может быть в качестве ключа или значения карты";
	КонецЕсли;

	Результат = Получить(Ключ);

	Соответствие.Вставить(Ключ, Значение);

	ОповеститьОбИзмененииКоллекции();

	Возврат Результат;

КонецФункции

Процедура ВставитьВсе(Карта) Экспорт

	Итератор = Карта.КлючиИЗначения().Итератор();

	Пока Итератор.ЕстьСледующий() Цикл
		
		КлючИЗначение = Итератор.Следующий();

		Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);

	КонецЦикла;

КонецПроцедуры

Функция ВставитьЕслиОтсутствует(Ключ, Значение) Экспорт

	ТекущееЗначение = Получить(Ключ);

	Если ТекущееЗначение.Пустой() Тогда
		Вставить(Ключ, Значение);
	КонецЕсли;

	Возврат ТекущееЗначение;

КонецФункции

Функция ВычислитьБезусловно(Ключ, Знач ФункцияПереназначения) Экспорт

	Если ТипЗнч(ФункцияПереназначения) = Тип("Строка") Тогда
		ФункцияПереназначения = Лямбда.Выражение(ФункцияПереназначения)
			.Интерфейс(ФункциональныеИнтерфейсы.БиФункция())
			.ВДействие();
	КонецЕсли;

	СтароеЗначение = Получить(Ключ);
	НовоеЗначение  = ФункцияПереназначения.Выполнить(Ключ, СтароеЗначение);

	Если НовоеЗначение <> Неопределено Тогда

		Вставить(Ключ, НовоеЗначение);

	ИначеЕсли СтароеЗначение.СодержитЗначение() Или СодержитКлюч(Ключ) Тогда

		Удалить(Ключ);

	КонецЕсли; // BSLLS:IfElseIfEndsWithElse-off

	Если НовоеЗначение = Неопределено Тогда
		Возврат Опциональные.Пустой();
	КонецЕсли;

	Возврат Новый Опциональный(НовоеЗначение);

КонецФункции

Функция ВычислитьЕслиОтсутствует(Ключ, Знач ФункцияНазначения) Экспорт

	Если ТипЗнч(ФункцияНазначения) = Тип("Строка") Тогда
		ФункцияНазначения = Лямбда.Выражение(ФункцияНазначения)
			.Интерфейс(ФункциональныеИнтерфейсы.УниФункция())
			.ВДействие();
	КонецЕсли;

	НовоеЗначение = Неопределено;
	ТекущееЗначение = Получить(Ключ);

	Если ТекущееЗначение.Пустой() Тогда

		НовоеЗначение = ФункцияНазначения.Выполнить(Ключ);

		Если НовоеЗначение <> Неопределено Тогда
			Вставить(Ключ, НовоеЗначение);
		КонецЕсли;
	
	Иначе
		Возврат ТекущееЗначение;
	КонецЕсли;

	Если НовоеЗначение = Неопределено Тогда
		Возврат Опциональные.Пустой();
	КонецЕсли;

	Возврат Новый Опциональный(НовоеЗначение);

КонецФункции

Функция ВычислитьЕслиПрисутствует(Ключ, Знач ФункцияПереназначения) Экспорт
	
	Если ТипЗнч(ФункцияПереназначения) = Тип("Строка") Тогда
		ФункцияПереназначения = Лямбда.Выражение(ФункцияПереназначения)
			.Интерфейс(ФункциональныеИнтерфейсы.БиФункция())
			.ВДействие();
	КонецЕсли;

	НовоеЗначение = Неопределено;

	Если СодержитКлюч(Ключ) Тогда

		СтароеЗначение = Получить(Ключ);
		НовоеЗначение  = ФункцияПереназначения.Выполнить(Ключ, СтароеЗначение.Получить());

		Если НовоеЗначение <> Неопределено Тогда
			Вставить(Ключ, НовоеЗначение);
		Иначе
			Удалить(Ключ);
		КонецЕсли;

	КонецЕсли;

	Если НовоеЗначение = Неопределено Тогда
		Возврат Опциональные.Пустой();
	КонецЕсли;

	Возврат Новый Опциональный(НовоеЗначение);

КонецФункции

Функция Слить(Ключ, Значение, Знач ФункцияПереназначения) Экспорт

	Если ТипЗнч(ФункцияПереназначения) = Тип("Строка") Тогда
		ФункцияПереназначения = Лямбда.Выражение(ФункцияПереназначения)
			.Интерфейс(ФункциональныеИнтерфейсы.БиФункция())
			.ВДействие();
	КонецЕсли;

	СтароеЗначение = Получить(Ключ);
	НовоеЗначение  = ?(
		СтароеЗначение.Пустой(),
		Значение,
		ФункцияПереназначения.Выполнить(СтароеЗначение.Получить(), Значение)
	);

	Если НовоеЗначение = Неопределено Тогда
		Удалить(Ключ);
	Иначе
		Вставить(Ключ, НовоеЗначение);
	КонецЕсли;

	Если НовоеЗначение = Неопределено Тогда
		Возврат Опциональные.Пустой();
	КонецЕсли;

	Возврат Новый Опциональный(НовоеЗначение);

КонецФункции

Функция Заменить(Ключ, Значение) Экспорт

	Если СодержитКлюч(Ключ) Тогда
		Возврат Вставить(Ключ, Значение);
	КонецЕсли;
	
	Возврат Опциональные.Пустой();

КонецФункции

Функция ЗаменитьЕслиЗначение(Ключ, ПрошлоеЗначение, Значение) Экспорт

	ТекущееЗначение = Получить(Ключ);

	Если ТекущееЗначение.СодержитЗначение() И ТекущееЗначение.Получить() = ПрошлоеЗначение Тогда

		Вставить(Ключ, Значение);

		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

Процедура ЗаменитьВсе(Знач ФункцияПереназначения) Экспорт

	Если ТипЗнч(ФункцияПереназначения) = Тип("Строка") Тогда
		ФункцияПереназначения = Лямбда.Выражение(ФункцияПереназначения)
			.Интерфейс(ФункциональныеИнтерфейсы.БиФункция())
			.ВДействие();
	КонецЕсли;

	НовыеЗначения = Новый Соответствие;

	Для каждого КлючИЗначение Из Соответствие Цикл
		
		НовыеЗначения.Вставить(
		 	КлючИЗначение.Ключ,
		 	ФункцияПереназначения.Выполнить(КлючИЗначение.Ключ, КлючИЗначение.Значение)
		);

	КонецЦикла;

	Для каждого КлючИЗначение Из НовыеЗначения Цикл
		
		Вставить(
		 	КлючИЗначение.Ключ,
		 	КлючИЗначение.Значение
		);

	КонецЦикла;

КонецПроцедуры

Функция Удалить(Ключ) Экспорт

	Результат = Получить(Ключ);

	Если Не Результат.Пустой() Тогда

		Соответствие.Удалить(Ключ);
		ОповеститьОбИзмененииКоллекции();
	
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ОбработкаПолученияПредставления(Представление, СтандартнаяОбработка) // BSLLS:UnusedLocalMethod-off
	КартыСлужебный.ОбработчикПолученияПредставленияКарты(ЭтотОбъект, Представление, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОповеститьОбИзмененииКоллекции()
	ВызватьСобытие("КоллекцияМодифицирована", Новый Массив);
КонецПроцедуры

&Реализует("Карта")
Процедура ПриСозданииОбъекта(Карта = Неопределено)
	
	Соответствие = Новый Соответствие;

	Если Карта <> Неопределено Тогда
		ВставитьВсе(Карта);
	КонецЕсли;

КонецПроцедуры
