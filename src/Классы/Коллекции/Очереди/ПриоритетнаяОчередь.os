#Использовать lambdas
#Использовать fluent
#Использовать optional

#Использовать "../../../internal"

Перем Массив;        // Элементы очереди
Перем ЕстьИтераторы; // Признак наличия созданных итераторов
Перем Компаратор;    // Компаратор, который приоритезирует очередь 

Функция Итератор() Экспорт

	ЕстьИтераторы = Истина;

	Возврат Новый ИтераторМассив(Массив, ЭтотОбъект);

КонецФункции

Процедура ДляКаждого(Знач Алгоритм, Знач Контекст = Неопределено) Экспорт

	Если ТипЗнч(Алгоритм) = Тип("Строка") Тогда

		Алгоритм = Лямбда.Выражение(Алгоритм)
			.Интерфейс(ФункциональныеИнтерфейсы.УниПроцедура());

		Если ТипЗнч(Контекст) = Тип("Структура")
            Или ТипЗнч(Контекст) = Тип("ФиксированнаяСтруктура") Тогда
			Алгоритм.Контекст(Контекст);
		Иначе
			Алгоритм.ЗахватитьОбъект(Контекст);
		КонецЕсли;

		Алгоритм = Алгоритм.ВДействие();

	КонецЕсли;

	Итератор().ДляКаждогоОставшегося(Алгоритм, Контекст);

КонецПроцедуры

Функция Содержит(Элемент) Экспорт
	Возврат Массив.Найти(Элемент) <> Неопределено;
КонецФункции

Функция СодержитВсе(Коллекция) Экспорт

	Результат = Истина;

	Итератор = Коллекция.Итератор();

	Пока Итератор.ЕстьСледующий() Цикл

		Если Не Содержит(Итератор.Следующий()) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция Пусто() Экспорт
	Возврат Количество() = 0;
КонецФункции

Функция ПроцессорКоллекции() Экспорт
	Возврат ПроцессорыКоллекций.ИзКоллекции(ВМассив());
КонецФункции

Функция Количество() Экспорт
	Возврат Массив.Количество();
КонецФункции

Функция ВМассив() Экспорт
	Возврат Массивы.Скопировать(Массив);
КонецФункции

Функция Подсмотреть() Экспорт

	Если Количество() > 0 Тогда
		Возврат Новый Опциональный(Массив[0]);
	КонецЕсли;

	Возврат Опциональные.Пустой();

КонецФункции

Функция Добавить(Элемент) Экспорт
	Возврат Положить(Элемент);
КонецФункции

Функция ДобавитьВсе(Коллекция) Экспорт

	БылДобавленХотяБыОдинЭлемент = Ложь;

	Итератор = Коллекция.Итератор();

	Пока Итератор.ЕстьСледующий() Цикл

		БылДобавленХотяБыОдинЭлемент = Добавить(Итератор.Следующий())
			Или БылДобавленХотяБыОдинЭлемент;

	КонецЦикла;

	Возврат БылДобавленХотяБыОдинЭлемент;

КонецФункции

Процедура Очистить() Экспорт

	Массив.Очистить();
	ОповеститьОбИзмененииКоллекции();

КонецПроцедуры

Функция Удалить(Элемент) Экспорт

	Индекс = Массив.Найти(Элемент);

	Если Индекс <> Неопределено Тогда

		Массив.Удалить(Индекс);
		ОповеститьОбИзмененииКоллекции();

		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция УдалитьВсе(Коллекция) Экспорт

	БылУдаленХотяБыОдинЭлемент = Ложь;

	Итератор = Коллекция.Итератор();

	Пока Итератор.ЕстьСледующий() Цикл

		БылУдаленХотяБыОдинЭлемент = Удалить(Итератор.Следующий())
			Или БылУдаленХотяБыОдинЭлемент;

	КонецЦикла;

	Возврат БылУдаленХотяБыОдинЭлемент;

КонецФункции

Функция УдалитьЕсли(Знач Предикат, Знач Контекст = Неопределено) Экспорт

	Если ТипЗнч(Предикат) = Тип("Строка") Тогда

		Предикат = Лямбда.Выражение(Предикат)
			.Интерфейс(ФункциональныеИнтерфейсы.УниФункция());

		Если ТипЗнч(Контекст) = Тип("Структура")
            Или ТипЗнч(Контекст) = Тип("ФиксированнаяСтруктура") Тогда
			Предикат.Контекст(Контекст);
		Иначе
			Предикат.ЗахватитьОбъект(Контекст);
		КонецЕсли;

		Предикат = Предикат.ВДействие();

	КонецЕсли;

	БылУдаленХотяБыОдинЭлемент = Ложь;

	Итератор = Итератор();

	Пока Итератор.ЕстьСледующий() Цикл

		Если Предикат.Выполнить(Итератор.Следующий()) Тогда

			Итератор.Удалить();

			БылУдаленХотяБыОдинЭлемент = Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат БылУдаленХотяБыОдинЭлемент;

КонецФункции

Функция СохранитьВсе(Коллекция) Экспорт

	БылУдаленХотяБыОдинЭлемент = Ложь;

	Итератор = Итератор();

	Пока Итератор.ЕстьСледующий() Цикл

		Если Не Коллекция.Содержит(Итератор.Следующий()) Тогда

			Итератор.Удалить();

			БылУдаленХотяБыОдинЭлемент = Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат БылУдаленХотяБыОдинЭлемент;

КонецФункции

Функция Положить(Элемент) Экспорт

	Если Элемент = Неопределено Тогда
		ВызватьИсключение "Очередь не может содержать Неопределено";
	КонецЕсли;

	Добавлен = Ложь;

	Для Индекс = 0 По Массив.ВГраница() Цикл

		Если Компаратор.Выполнить(Массив[Индекс], Элемент) > 0 Тогда
			Массив.Вставить(Индекс, Элемент);
			Добавлен = Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если Не Добавлен Тогда
		Массив.Добавить(Элемент);
	КонецЕсли;

	ОповеститьОбИзмененииКоллекции();

	Возврат Истина;

КонецФункции

Функция Взять() Экспорт

	Если Количество() > 0 Тогда

		Элемент = Массив[0];
		Массив.Удалить(0);
		ОповеститьОбИзмененииКоллекции();

		Возврат Новый Опциональный(Элемент);

	КонецЕсли;

	Возврат Опциональные.Пустой();

КонецФункции

Процедура ОповеститьОбИзмененииКоллекции()

	Если ЕстьИтераторы Тогда
		ВызватьСобытие("КоллекцияМодифицирована", Новый Массив);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Представление, СтандартнаяОбработка) // BSLLS:UnusedLocalMethod-off
	КоллекцииСлужебный.ОбработчикПолученияПредставленияКоллекции(ЭтотОбъект, Представление, СтандартнаяОбработка);
КонецПроцедуры

Функция ПолучитьИтератор() // BSLLS:UnusedLocalMethod-off
	Возврат Новый СлужебныйИтераторДляДвижка(Итератор());
КонецФункции

Процедура УстановитьКомпаратор(пКомпаратор, Контекст)

	Если пКомпаратор = Неопределено Тогда

		Компаратор = СравнениеЗначений.ПрямойПорядок();

	ИначеЕсли ТипЗнч(пКомпаратор) = Тип("Строка") Тогда

		Компаратор = Лямбда.Выражение(пКомпаратор)
			.Интерфейс(ФункциональныеИнтерфейсы.БиФункция());

		Если ТипЗнч(Контекст) = Тип("Структура")
            Или ТипЗнч(Контекст) = Тип("ФиксированнаяСтруктура") Тогда
			Компаратор.Контекст(Контекст);
		Иначе
			Компаратор.ЗахватитьОбъект(Контекст);
		КонецЕсли;

		Компаратор = Компаратор.ВДействие();

	ИначеЕсли ТипЗнч(пКомпаратор) = Тип("Действие") Тогда

		Компаратор = пКомпаратор;

	Иначе
		ВызватьИсключение "Компаратором может выступать либо Действие либо лямбда-выражение";
	КонецЕсли;

КонецПроцедуры

&Обходимое
&Реализует("Очередь")
Процедура ПриСозданииОбъекта(Компаратор = Неопределено, Коллекция = Неопределено, Контекст = Неопределено)

	Массив        = Новый Массив;
	ЕстьИтераторы = Ложь;

	УстановитьКомпаратор(Компаратор, Контекст);

	Если Коллекция <> Неопределено Тогда
		ДобавитьВсе(Коллекция);
	КонецЕсли;

КонецПроцедуры
