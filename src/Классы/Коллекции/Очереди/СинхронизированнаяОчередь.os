#Использовать "../../../internal"

Перем ВнутренняяОчередь;  // Оригинальная очередь
Перем Блокировка;         // Блокировка для синхронизации доступа

Функция Итератор() Экспорт
	Возврат ВнутренняяОчередь.Итератор();
КонецФункции

Процедура ДляКаждого(Алгоритм, Контекст = Неопределено) Экспорт
	
	Блокировка.Заблокировать();

	Попытка
		ВнутренняяОчередь.ДляКаждого(Алгоритм, Контекст);
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;

	Блокировка.Разблокировать();

КонецПроцедуры

Функция Содержит(Элемент) Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.Содержит(Элемент);
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Функция СодержитВсе(Коллекция) Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.СодержитВсе(Коллекция);
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Функция Пусто() Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.Пусто();
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;
	
КонецФункции

Функция ПроцессорКоллекции() Экспорт
	Возврат ВнутренняяОчередь.ПроцессорКоллекции();
КонецФункции

Функция Количество() Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.Количество();
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Функция ВМассив() Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.ВМассив();
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Функция Подсмотреть() Экспорт
	
	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.Подсмотреть();
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Функция Добавить(Элемент) Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.Добавить(Элемент);
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Функция ДобавитьВсе(Коллекция) Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.ДобавитьВсе(Коллекция);
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Процедура Очистить() Экспорт

	Блокировка.Заблокировать();

	Попытка
		ВнутренняяОчередь.Очистить();
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;

	Блокировка.Разблокировать();

КонецПроцедуры

Функция Удалить(Элемент) Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.Удалить(Элемент);
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Функция УдалитьВсе(Коллекция) Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.УдалитьВсе(Коллекция);
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Функция УдалитьЕсли(Предикат, Контекст = Неопределено) Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.УдалитьЕсли(Предикат, Контекст);
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Функция СохранитьВсе(Коллекция) Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.СохранитьВсе(Коллекция);
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;
	
	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Функция Положить(Элемент) Экспорт

	Блокировка.Заблокировать();

	Попытка
		Результат = ВнутренняяОчередь.Положить(Элемент);
	Исключение
		Блокировка.Разблокировать();
		ВызватьИсключение;
	КонецПопытки;

	Блокировка.Разблокировать();

	Возврат Результат;

КонецФункции

Функция Взять(Таймаут = 0) Экспорт

	Конец = ТекущаяУниверсальнаяДатаВМиллисекундах() + Таймаут;
	Результат = Неопределено;

	Пока Истина Цикл

		Блокировка.Заблокировать();

		Попытка
			Результат = ВнутренняяОчередь.Взять();
		Исключение
			Блокировка.Разблокировать();
			ВызватьИсключение;
		КонецПопытки;

		Блокировка.Разблокировать();

		ВремяВышло = ТекущаяУниверсальнаяДатаВМиллисекундах() >= Конец;

		Если Результат.СодержитЗначение() Или ВремяВышло Тогда
			Возврат Результат;
		КонецЕсли;

		Приостановить(100);

	КонецЦикла;

КонецФункции

Процедура ОбработкаПолученияПредставления(Представление, СтандартнаяОбработка) // BSLLS:UnusedLocalMethod-off
	КоллекцииСлужебный.ОбработчикПолученияПредставленияКоллекции(ЭтотОбъект, Представление, СтандартнаяОбработка);
КонецПроцедуры

Функция ПолучитьИтератор() // BSLLS:UnusedLocalMethod-off
	Возврат Новый СлужебныйИтераторДляДвижка(Итератор());
КонецФункции

&Обходимое
&Реализует("Очередь")
Процедура ПриСозданииОбъекта(Очередь)

	ВнутренняяОчередь  = Очередь;
	Блокировка         = Новый БлокировкаРесурса(ЭтотОбъект);

КонецПроцедуры
