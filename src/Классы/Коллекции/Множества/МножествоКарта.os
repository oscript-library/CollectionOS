#Использовать fluent
#Использовать lambdas

#Использовать "../../../internal"

Перем ВнутренняяКарта; // Ссылка на внутреннюю карту

Функция Итератор() Экспорт
	
	Рефлектор = Новый Рефлектор;

	Возврат Новый ИтераторКлючСоответствие(
		Рефлектор.ПолучитьСвойство(ВнутренняяКарта, "Соответствие"),
		ВнутренняяКарта
	);

КонецФункции

Процедура ДляКаждого(Алгоритм) Экспорт
	Итератор().ДляКаждогоОставшегося(Алгоритм);
КонецПроцедуры

Функция Содержит(Элемент) Экспорт
	Возврат ВнутренняяКарта.СодержитКлюч(Элемент);
КонецФункции

Функция СодержитВсе(Коллекция) Экспорт
	Возврат ВнутренняяКарта.Ключи().СодержитВсе(Коллекция);
КонецФункции

Функция Пусто() Экспорт
	Возврат ВнутренняяКарта.Пусто();
КонецФункции

Функция ПроцессорКоллекции() Экспорт
	Возврат ВнутренняяКарта.Ключи().ПроцессорКоллекции();
КонецФункции

Функция Количество() Экспорт
	Возврат ВнутренняяКарта.Количество();
КонецФункции

Функция ВМассив() Экспорт
	Возврат ВнутренняяКарта.Ключи().ВМассив();
КонецФункции

Функция Добавить(Элемент) Экспорт
	Возврат ВнутренняяКарта.Вставить(Элемент, Истина).Пустой();
КонецФункции

Функция ДобавитьВсе(Коллекция) Экспорт

	БылДобавленХотяБыОдинЭлемент = Ложь;

	Итератор = Коллекция.Итератор();

	Пока Итератор.ЕстьСледующий() Цикл

		БылДобавленХотяБыОдинЭлемент = Добавить(Итератор.Следующий())
			Или БылДобавленХотяБыОдинЭлемент;

	КонецЦикла;

	Возврат БылДобавленХотяБыОдинЭлемент;

КонецФункции

Процедура Очистить() Экспорт
	ВнутренняяКарта.Очистить();
КонецПроцедуры

Функция Удалить(Элемент) Экспорт
	
	Возврат ВнутренняяКарта.Удалить(Элемент).СодержитЗначение();

КонецФункции

Функция УдалитьВсе(Коллекция) Экспорт

	БылУдаленХотяБыОдинЭлемент = Ложь;

	Итератор = Коллекция.Итератор();

	Пока Итератор.ЕстьСледующий() Цикл

		БылУдаленХотяБыОдинЭлемент = Удалить(Итератор.Следующий())
			Или БылУдаленХотяБыОдинЭлемент;

	КонецЦикла;

	Возврат БылУдаленХотяБыОдинЭлемент;

КонецФункции

Функция УдалитьЕсли(Знач Предикат) Экспорт

	Если ТипЗнч(Предикат) = Тип("Строка") Тогда
		Предикат = Лямбда.Выражение(Предикат)
			.Интерфейс(ФункциональныеИнтерфейсы.УниФункция())
			.ВДействие();
	КонецЕсли;

	БылУдаленХотяБыОдинЭлемент = Ложь;

	Итератор = Итератор();

	Пока Итератор.ЕстьСледующий() Цикл

		Если Предикат.Выполнить(Итератор.Следующий()) Тогда
			
			Итератор.Удалить();

			БылУдаленХотяБыОдинЭлемент = Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат БылУдаленХотяБыОдинЭлемент;

КонецФункции

Функция СохранитьВсе(Коллекция) Экспорт

	БылУдаленХотяБыОдинЭлемент = Ложь;

	Итератор = Итератор();

	Пока Итератор.ЕстьСледующий() Цикл

		Если Не Коллекция.Содержит(Итератор.Следующий()) Тогда
			
			Итератор.Удалить();

			БылУдаленХотяБыОдинЭлемент = Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат БылУдаленХотяБыОдинЭлемент;

КонецФункции

Процедура ОбработкаПолученияПредставления(Представление, СтандартнаяОбработка) // BSLLS:UnusedLocalMethod-off
	КоллекцииСлужебный.ОбработчикПолученияПредставленияКоллекции(ЭтотОбъект, Представление, СтандартнаяОбработка);
КонецПроцедуры

Функция ПолучитьИтератор() // BSLLS:UnusedLocalMethod-off
	Возврат Новый СлужебныйИтераторДляДвижка(Итератор());
КонецФункции

&Обходимое
&Реализует("Множество")
Процедура ПриСозданииОбъекта(Коллекция = Неопределено)
	
	ВнутренняяКарта = Новый КартаСоответствие();

	Если Коллекция <> Неопределено Тогда
		ДобавитьВсе(Коллекция);
	КонецЕсли;

КонецПроцедуры
